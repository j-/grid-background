{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["App","React","useState","gridSize","setGridSize","handleChangeGridSize","useCallback","e","currentTarget","value","gridColorFG","setGridColorFG","handleChangeGridColorFG","gridColorBG","setGridColorBG","handleChangeGridColorBG","background","useMemo","encodeURIComponent","className","href","onSubmit","preventDefault","htmlFor","id","type","onChange","style","fontFamily","whiteSpace","overflowX","color","height","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1a3079d3.chunk.js","sourcesContent":["import React from 'react';\n\nconst App: React.FC = () => {\n  const [gridSize, setGridSize] = React.useState('4rem');\n  const handleChangeGridSize = React.useCallback<React.ChangeEventHandler<HTMLInputElement>>((e) => {\n    setGridSize(e.currentTarget.value);\n  }, []);\n  const [gridColorFG, setGridColorFG] = React.useState('#eee');\n  const handleChangeGridColorFG = React.useCallback<React.ChangeEventHandler<HTMLInputElement>>((e) => {\n    setGridColorFG(e.currentTarget.value);\n  }, []);\n  const [gridColorBG, setGridColorBG] = React.useState('#fff');\n  const handleChangeGridColorBG = React.useCallback<React.ChangeEventHandler<HTMLInputElement>>((e) => {\n    setGridColorBG(e.currentTarget.value);\n  }, []);\n  const background = React.useMemo(() => {\n    return `${gridColorFG} url(\"data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 2 2'><path fill='${encodeURIComponent(gridColorBG)}' d='M0 0H1V2H2V1H0Z'/></svg>\") 0 0/${gridSize}`;\n  }, [gridColorFG, gridColorBG, gridSize]);\n  return (\n    <div className=\"App container my-5\">\n      <a href=\"https://skeoh.com/\" className=\"text-secondary\">&larr; skeoh.com</a>\n      <h1 className=\"mb-5\">Grid background</h1>\n\n      <form onSubmit={(e) => e.preventDefault()} className=\"card card-body my-3\">\n        <div className=\"row\">\n          <div className=\"form-group row col-md my-md-0\">\n            <label htmlFor=\"App-grid-size\" className=\"col-xl-3 col-form-label\">Grid size</label>\n            <div className=\"col-xl-9\">\n              <input\n                id=\"App-grid-size\"\n                className=\"form-control text-monospace\"\n                type=\"text\"\n                value={gridSize}\n                onChange={handleChangeGridSize}\n              />\n            </div>\n          </div>\n          <div className=\"form-group row col-md my-md-0\">\n            <label htmlFor=\"App-grid-color-fg\" className=\"col-xl-3 col-form-label\">Color 1</label>\n            <div className=\"col-xl-9\">\n              <input\n                id=\"App-grid-color-fg\"\n                className=\"form-control text-monospace\"\n                type=\"text\"\n                value={gridColorFG}\n                onChange={handleChangeGridColorFG}\n              />\n            </div>\n          </div>\n          <div className=\"form-group row col-md my-md-0\">\n            <label htmlFor=\"App-grid-color-bg\" className=\"col-xl-3 col-form-label\">Color 2</label>\n            <div className=\"col-xl-9\">\n              <input\n                id=\"App-grid-color-bg\"\n                className=\"form-control text-monospace\"\n                type=\"text\"\n                value={gridColorBG}\n                onChange={handleChangeGridColorBG}\n              />\n            </div>\n          </div>\n        </div>\n      </form>\n\n      <div className=\"card card-body bg-dark my-3\" style={{\n        fontFamily: 'Consolas, \"Courier New\", monospace',\n        whiteSpace: 'pre-wrap',\n        overflowX: 'auto',\n      }}>\n        <div>\n          <span style={{ color: '#d7ba7d' }}>body</span>\n          <span style={{ color: '#d4d4d4' }}>&#32;&#123;</span>\n        </div>\n        <div>\n          <span style={{ color: '#d4d4d4' }}>&#32;&#32;</span>\n          <span style={{ color: '#9cdcfe' }}>background</span>\n          <span style={{ color: '#d4d4d4' }}>:&#32;</span>\n          <span style={{ color: '#ce9178' }}>{gridColorFG}</span>\n          <span style={{ color: '#d4d4d4' }}>&#32;</span>\n          <span style={{ color: '#dcdcaa' }}>url</span>\n          <span style={{ color: '#d4d4d4' }}>(</span>\n          <span style={{ color: '#ce9178' }}>\"data:image/svg+xml,&lt;svg&#32;xmlns='http://www.w3.org/2000/svg'&#32;viewBox='0&#32;0&#32;2&#32;2'&gt;&lt;path&#32;fill='{encodeURIComponent(gridColorBG)}'&#32;d='M0&#32;0h1v1H0zM1&#32;1h1v1H1z'/&gt;&lt;/svg&gt;\"</span>\n          <span style={{ color: '#d4d4d4' }}>)&#32;</span>\n          <span style={{ color: '#b5cea8' }}>0</span>\n          <span style={{ color: '#d4d4d4' }}>&#32;</span>\n          <span style={{ color: '#b5cea8' }}>0</span>\n          <span style={{ color: '#d4d4d4' }}>/</span>\n          <span style={{ color: '#b5cea8' }}>{gridSize}</span>\n          <span style={{ color: '#d4d4d4' }}>;</span>\n        </div>\n        <div>\n          <span style={{ color: '#d4d4d4' }}>&#125;</span>\n        </div>\n      </div>\n\n      <div className=\"card card-body my-3\" style={{ background, height: '20rem' }}>\n        <span className=\"display-3\">Preview</span>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}